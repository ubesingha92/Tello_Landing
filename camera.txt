The code you've provided seems to be a part of a PID controller for maintaining the y-position of a drone with respect to a frame center. However, the question you asked about the ArUco marker and measuring the distance isn't directly related to the code snippet. 

To calculate the distance from the center of the frame to the ArUco marker, you need to consider a couple of factors. Given that you know the actual size of the ArUco marker (5 cm in this case) and assuming that your camera is calibrated, you could perform the following steps:

1. Detect the ArUco marker in the image.
2. Compute the perimeter of the ArUco marker in the image (in pixels).
3. Determine the focal length of your camera. This can be obtained from the camera's specifications or by performing a calibration.
4. The actual distance from the camera to the ArUco marker can be computed using the formula:

    `D = (W * F) / P`

    where:
    - D is the distance between the camera and the marker
    - W is the actual width of the marker (5 cm in your case)
    - F is the focal length of the camera
    - P is the width of the marker in the image (in pixels)

Note that this will give you the distance from the camera to the marker, not from the center of the frame to the marker. To get this distance, you would need to find the pixel coordinates of the center of the marker and of the center of the frame, and calculate the Euclidean distance between these two points. 

If you wish to obtain the physical distance (in cm, for example), you would need to convert the pixel distance into real-world distance. To do this, you could use the scale determined from your ArUco marker (i.e., the ratio of the actual marker size to the size of the marker in the image in pixels). Multiplying the pixel distance by this scale will give you the physical distance.

However, note that this approach assumes a single plane of focus -- it might not be accurate if the marker and the center of the frame are at different distances from the camera. 

Your code seems to be using a PID controller to adjust the drone's position based on the y-error. If you want to move the drone to keep the ArUco marker at the center of the frame, you could use a similar PID controller, but base your error on the distance between the center of the frame and the marker, instead of the `FRAME_CENTER_Y - current_position_y` error. 

The PID controller would work to minimize this error, moving the drone until the marker is at the center of the frame. Depending on your specific application, you might want to calculate the error in x and y separately and use two PID controllers to adjust the drone's x and y position independently.